name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - 'code-base/**'
      - 'docker/**'
      - 'K8s/**'
      - 'Observability/**'
      - '.github/workflows/**'

  workflow_dispatch:

jobs:
  terraform:
    name: 🌱 Provision EKS Infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v3

      - name: 🔑 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: 🧰 Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: ⚙️ Terraform Init & Plan
        working-directory: terraform
        run: |
          terraform init
          terraform plan -out=tfplan
        # terraform apply -auto-approve tfplan

  build-and-deploy:
    name: 🚀 Build Docker & Deploy to EKS
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v3

      - name: 🛠️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🐳 Build and Push Docker Image
        run: |
          docker build -t vinaygolkonda99/llm_deps:llm_app -f docker/Dockerfile.app .
          docker push vinaygolkonda99/llm_deps:llm_app

      - name: 🔑 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: 📡 Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region us-east-1 --name mlops-cluster

      - name: 🚀 Deploy to EKS
        run: |
          kubectl apply -f K8s/deployment.yaml
          kubectl apply -f K8s/service.yaml


  observability-stack:
   name: 📊 Install Mimir, Grafana, Loki & Tempo
   runs-on: ubuntu-latest
   needs: terraform

   steps:
     - name: 📥 Checkout Code
       uses: actions/checkout@v3

     - name: 🔑 Configure AWS Credentials
       uses: aws-actions/configure-aws-credentials@v2
       with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws-region: us-east-1

     - name: 🧭 Update kubeconfig
       run: |
         aws eks update-kubeconfig --region us-east-1 --name mlops-cluster

     - name: 🛠️ Install Helm
       uses: azure/setup-helm@v3

     - name: 📦 Add Helm Repos & Namespace
       run: |
         helm repo add grafana https://grafana.github.io/helm-charts
         helm repo update
         kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -

     - name: ⚙️ Install Mimir
       run: |
         helm upgrade --install mimir grafana/mimir-distributed \
           --namespace monitoring \
           -f observability/mimir/helm-values.yaml

     - name: 🔍 Install Loki
       run: |
         helm upgrade --install loki grafana/loki-stack \
           --namespace monitoring \
           -f observability/loki/helm-values.yaml

     - name: 🧭 Install Tempo
       run: |
         helm upgrade --install tempo grafana/tempo-distributed \
           --namespace monitoring \
           -f observability/tempo/helm-values.yaml

     - name: 📊 Install Grafana
       run: |
         helm upgrade --install grafana grafana/grafana \
           --namespace monitoring \
           -f observability/grafana/helm-values.yaml

     - name: 📡 Output Grafana LoadBalancer URL
       run: |
         kubectl get svc -n monitoring grafana
