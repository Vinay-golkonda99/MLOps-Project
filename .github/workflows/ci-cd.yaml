name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - 'code-base/**'
      - 'docker/**'
      - 'K8s/**'
      - 'monitoring/**'
      - '.github/workflows/**'

  workflow_dispatch:

jobs:
  terraform:
    name: 🌱 Provision EKS Infrastructure
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      (
        github.event_name == 'push' &&
        (
          contains(join('\n', github.event.commits.*.modified), 'terraform/') ||
          contains(join('\n', github.event.commits.*.modified), '.tf') ||
          contains(join('\n', github.event.commits.*.modified), 'backend.tf')
        )
      )
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v3

      - name: 🔑 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: 🧰 Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: ⚙️ Terraform Init & Plan
        working-directory: terraform
        run: |
          terraform init
          terraform plan -out=tfplan
        # terraform apply -auto-approve tfplan

  build-and-deploy:
    name: 🚀 Build Docker & Deploy to EKS
    runs-on: ubuntu-latest
    needs: terraform
    if: |
      github.event_name == 'workflow_dispatch' ||
      (
        github.event_name == 'push' &&
        (
          contains(join('\n', github.event.commits.*.modified), 'docker/') ||
          contains(join('\n', github.event.commits.*.modified), 'code-base/') ||
          contains(join('\n', github.event.commits.*.modified), 'K8s/')
        )
      )
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v3

      - name: 🛠️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🐳 Build and Push Docker Image
        run: |
          docker build -t vinaygolkonda99/llm_deps:llm_app -f docker/Dockerfile.app .
          docker push vinaygolkonda99/llm_deps:llm_app

      - name: 🔑 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: 📡 Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region us-east-1 --name mlops-cluster

      - name: 🚀 Deploy to EKS
        run: |
          kubectl apply -f K8s/deployment.yaml
          kubectl apply -f K8s/service.yaml

  observability-stack:
    name: 📊 Install Mimir, Grafana, Loki & Tempo
    runs-on: ubuntu-latest
    needs: terraform
    if: |
      github.event_name == 'workflow_dispatch' ||
      (
        github.event_name == 'push' &&
        (
          contains(join('\n', github.event.commits.*.modified), 'monitoring/') ||
          contains(join('\n', github.event.commits.*.modified), '.github/workflows/')
        )
      )
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v3

      - name: 🔑 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: 🧭 Update kubeconfig
        run: |
          aws eks update-kubeconfig --region us-east-1 --name mlops-cluster

      - name: 🛠️ Install Helm
        uses: azure/setup-helm@v3

      - name: 📦 Add Helm Repos
        run: |
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update
          kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -

      - name: ⚙️ Install Grafana Mimir
        run: |
          helm upgrade --install mimir grafana/mimir-distributed \
            --namespace monitoring \
            --set gateway.service.type=ClusterIP

      - name: 🔍 Install Loki (Logs)
        run: |
          helm upgrade --install loki grafana/loki-stack \
            --namespace monitoring \
            --set grafana.enabled=false

      - name: 🧭 Install Tempo (Traces)
        run: |
          helm upgrade --install tempo grafana/tempo-distributed \
            --namespace monitoring \
            --set tempo.queryFrontend.query.enabled=true \
            --set tempo.metricsGenerator.enabled=true

      - name: 📊 Install Grafana
        run: |
          helm upgrade --install grafana grafana/grafana \
            --namespace monitoring \
            --set service.type=LoadBalancer \
            --set adminPassword='admin123' \
            --set datasources."datasources\.yaml".apiVersion=1 \
            --set datasources."datasources\.yaml".datasources[0].name=Loki \
            --set datasources."datasources\.yaml".datasources[0].type=loki \
            --set datasources."datasources\.yaml".datasources[0].url=http://loki.monitoring.svc.cluster.local:3100 \
            --set datasources."datasources\.yaml".datasources[1].name=Tempo \
            --set datasources."datasources\.yaml".datasources[1].type=tempo \
            --set datasources."datasources\.yaml".datasources[1].url=http://tempo.monitoring.svc.cluster.local:3100 \
            --set datasources."datasources\.yaml".datasources[2].name=Mimir \
            --set datasources."datasources\.yaml".datasources[2].type=prometheus \
            --set datasources."datasources\.yaml".datasources[2].url=http://mimir-gateway.monitoring.svc.cluster.local

      - name: 📡 Output Grafana LoadBalancer URL
        run: |
          kubectl get svc -n monitoring grafana
